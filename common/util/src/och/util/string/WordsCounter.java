/*
 * Copyright 2015 Evgeny Dolganov (evgenij.dolganov@gmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package och.util.string;

import static java.lang.Character.*;
import static java.util.Collections.*;
import static och.util.ArrayUtil.*;
import static och.util.FileUtil.*;
import static och.util.StreamUtil.*;
import static och.util.StringUtil.*;
import static och.util.Util.*;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * –°—á–µ—Ç—á–∏–∫ —Å–ª–æ–≤.
 * –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
 * –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å –∏, –µ—Å–ª–∏ –µ–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É.
 * 
 * <p>
 * –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –∑–∞–¥–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π -Dfile.encoding
 * 
 * <p>
 * –ï—Å–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å—á–µ—Ç—á–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞–ª–æ RAM, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —Å —Ñ–ª–∞–≥–æ–º 'smallram',
 * –∏–ª–∏ –∂–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –∑–∞–¥–∞—Ç—å RamTopSize (—Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏).
 */
public class WordsCounter {
	


	public static void main(String[] args) throws IOException {
		
		//–Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–ª–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
		boolean useSmallRam = args.length > 0 && "smallram".equals(args[0]);
		
		WordsCounter counter = new WordsCounter();
		counter.setRamTopSize(useSmallRam? 10000 : DEFAULT_RAM_TOP_SIZE);
		
		//–ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤
		int topSize = 10;
		int wordMaxSize = DEFAULT_WORD_MAX_SIZE;
		List<WordStat> result = counter.getTop(System.in, topSize, wordMaxSize);
		
		//–≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
		for (WordStat stat : result) {
			System.out.println(stat.word + " " + stat.count);
		}
	}
	
	
	
	/** –†–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
	public static final int DEFAULT_RAM_TOP_SIZE = 1000000;
	
	/** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
	public static final int DEFAULT_WORD_MAX_SIZE = 30;
	
	/** –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã */
	public static class WordStat implements Comparable<WordStat>{
		
		/** –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ */
		public final String word;
		
		/** –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π */
		private long count;
		
		public WordStat(String word, long count) {
			this.word = word;
			this.count = count > 0? count : 0;
		}
		
		/** —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–ª–æ–≤–∞ –Ω–∞ 1 */
		public void incCount(){
			if(count == Long.MAX_VALUE) return;
			count++;
		}
		
		/** —É–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–ª–æ–≤–∞ –Ω–∞ 1 */
		public void decCount(){
			if(count == 0) return;
			count--;
		}
		
		public long count(){
			return count;
		}
		
		@Override
		public int compareTo(WordStat o) {
			//count - desc
			//word - asc
			int result = Long.compare(o.count, count);
			return result != 0? result : word.compareTo(o.word);
		}

		@Override
		public String toString() {
			return "WordStat [word=" + word + ", count=" + count + "]";
		}
	}

	
	
	private boolean debug = false;
	private File parentDir = new File(".");
	private boolean removeIndexesFiles = true;
	private int ramTopSize = DEFAULT_RAM_TOP_SIZE;
	
	/**
	 * –†–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.
	 * –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —É–º–µ—â—è—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±—ã—Å—Ç—Ä–æ 
	 * (—Ç.–∫. –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ—Ç –≤ RAM). –?–Ω–∞—á–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 
	 * —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ. –≠—Ç–æ –∑–∞–º–µ–¥–ª—è–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤, –Ω–æ
	 * –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç–∫–æ–Ω–æ–º–∏—Ç—å RAM. 
	 */
	public void setRamTopSize(int ramTopSize) {
		this.ramTopSize = ramTopSize;
	}
	
	/** –í—ã–≤–æ–¥ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ª–æ–≥–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ—Ç */
	public void setDebug(boolean debug) {
		this.debug = debug;
	}
	
	/** 
	 * –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å–Ω—ã–π 
	 * —Ñ–∞–π–ª –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è. 
	 */
	public void setTmpIndexDirParent(File parentDir) {
		this.parentDir = parentDir;
	}
	
	/** –ù—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã */
	public void setRemoveIndexesFiles(boolean removeIndexesFiles) {
		this.removeIndexesFiles = removeIndexesFiles;
	}

	
	/**
	 * –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –∏–∑ –ø–æ—Ç–æ–∫–∞
	 */
	public List<WordStat> getTop(InputStream in, int topMaxSize) throws IOException {
		return getTop(in, topMaxSize, DEFAULT_WORD_MAX_SIZE);
	}
	
	/**
	 * –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
	 */
	public List<WordStat> getTop(String words, int topMaxSize) throws IOException {
		return getTop(new ByteArrayInputStream(getBytesUTF8(words)), topMaxSize, DEFAULT_WORD_MAX_SIZE);
	}
	
	public List<WordStat> getTop(String words, int topMaxSize, int wordMaxSize) throws IOException {
		return getTop(new ByteArrayInputStream(getBytesUTF8(words)), topMaxSize, wordMaxSize);
	}
	
	/**
	 * –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –∏–∑ –ø–æ—Ç–æ–∫–∞
	 * @param in - –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫
	 * @param topMaxSize - –º–∞–∫—Å.—Ä–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	 * @param wordMaxSize - –º–∞–∫—Å.—Ä–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞ (—Å–ª–æ–≤–∞ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)
	 * @return —Å–ø–∏—Å–æ–∫ —Ç–æ–ø —Å–ª–æ–≤
	 * @throws IOException –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
	 */
	public List<WordStat> getTop(InputStream in, int topMaxSize, int wordMaxSize) throws IOException {
		
		if(in == null) return emptyList();
		if(topMaxSize < 1) return emptyList();
		if(wordMaxSize < 1) return emptyList();
		
		WordsIndex index = new WordsIndex(parentDir, ramTopSize, topMaxSize, wordMaxSize);
		index.setDebug(debug);
		
		BufferedReader reader = null;
		try {
			
			reader = new BufferedReader(new InputStreamReader(in));
			
			//–û–±—Ö–æ–¥ –ø–æ—Ç–æ–∫–∞
			StringBuilder sb = new StringBuilder();
			int ch;
			while ((ch = reader.read()) != -1) {
				ch = toLowerCase(ch);
				//—Å–ª–æ–≤–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
				if(isSeparator(ch)){
					String word = sb.toString();
					sb = new StringBuilder();
					if( word.length() > 0){
						//–¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –∏–Ω–¥–µ–∫—Å
						index.add(word);
					}
				}
				//–≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å–ª–æ–≤–∞
				else {
					sb.append((char)ch);
				}
			}
			String lastWord = sb.toString();
			if( lastWord.length() > 0) {
				index.add(lastWord);
			}
			
			return index.getTop();
		} finally {
			close(reader);
			if(removeIndexesFiles) index.clean();
		}
		

	}
	
	/** –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º */
	public static boolean isSeparator(int ch) {
		if(ch == ' ') return true;
		if(ch == '\n') return true;
		if(ch == '\t') return true;
		if(ch == '\r') return true;
		if(ch == '\0') return true;
		//if(Character.isSpaceChar(ch)) return true;
		//if(Character.isWhitespace(ch)) return true;
		return false;
	}
	
	
	
	/** 
	 * –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–ª–æ–≤
	 */
	public static class WordsIndex {
		
		private int ramTopSize;
		private int topMaxSize;
		private int wordMaxSize;
		private ArrayList<WordStat> top;
		private HashMap<String, WordStat> topByWord;
		private boolean isDebug;
		
		private IndexesStorage storage;
		private boolean sorted = true;

		public WordsIndex(File parentDir, int ramTopSize, int topMaxSize, int wordMaxSize) throws IOException {
			
			this.topMaxSize = topMaxSize;
			this.wordMaxSize = wordMaxSize;
			
			if(ramTopSize < topMaxSize) ramTopSize = topMaxSize;
			this.ramTopSize = ramTopSize;
			
			top = new ArrayList<WordsCounter.WordStat>(ramTopSize);
			topByWord = new HashMap<String, WordsCounter.WordStat>(ramTopSize);
			
			storage = new IndexesStorage(parentDir, wordMaxSize);
		}

		public void setDebug(boolean isDebug) {
			this.isDebug = isDebug;
		}


		/** –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ –∏–Ω–¥–µ–∫—Å */
		public void add(String word) throws IOException {
			
			if(word == null) return;
			if(word.length() > wordMaxSize) {
				if(isDebug) System.out.println("skip too long word: " + (word.length() < 1000? word : "[long word]"));
				return;
			}
			if(storage.isInvaild(word)) {
				if(isDebug) System.out.println("skip invalid for storage word: " + (word.length() < 1000? word : "[long word]"));
				return;
			}
			
			//–°–ª–æ–≤–æ –µ—Å—Ç—å –≤ —Ç–æ–ø–µ RAM
			WordStat inTop = topByWord.get(word);
			if(inTop != null){
				inTop.incCount();
				sorted = false;
				return;
			}
			
			//–°–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Ç–æ–ø–µ
			WordStat stat = null;
			if(top.size() < ramTopSize) {
				stat = new WordStat(word, 0);
			}
			else {
				//–µ—Å–ª–∏ —Ç–æ–ø –ø–æ–ª–Ω—ã–π - –∏—â–µ–º —Å–ª–æ–≤–æ –≤ —Ñ–∞–π–ª–æ–≤–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
				stat = storage.getFromStorage(word);
				if(stat == null) {
					stat = new WordStat(word, 0);
				}
			}

			stat.incCount();
			
			//–¢–æ–ø –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø
			if(top.size() < ramTopSize){
				top.add(stat);
				sorted = false;
				topByWord.put(word, stat);
				return;
			}
			

			//–¢–æ–ø –∑–∞–ø–æ–ª–Ω–µ–Ω
			//–ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –∏–∑ —Ç–æ–ø–∞
			if(!sorted){
				sort(top);
				sorted = true;
			}
			int lastTopIndex = ramTopSize-1;
			WordStat lastInTop = top.get(lastTopIndex);
			
			//–°–ª–æ–≤–æ –º–µ–Ω—å—à–µ —á–µ–º –≤—Å–µ –∏–∑ —Ç–æ–ø–∞
			if(lastInTop.compareTo(stat) < 0){
				storage.putToStorage(stat);
				return;
			}

			
			//–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–æ–ø
			//-- —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ
			top.remove(lastTopIndex);
			topByWord.remove(lastInTop.word);
			storage.putToStorage(lastInTop);
			
			//-- –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
			top.add(stat);
			sorted = false;
			topByWord.put(word, stat);
			
		}
		
		/**
		 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ø–∞
		 */
		public List<WordStat> getTop() {
			if(!sorted) {
				sort(top);
				sorted = true;
			}
			return top.size() > topMaxSize? top.subList(0, topMaxSize) : top;
		}
		
		/** –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (–µ—Å–ª–∏ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å) */
		public void clean() {
			storage.remove();
		}
		
		
	}
	
	
	
	/**
	 * –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
	 * –?—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ RAM.
	 * 
	 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç HashMap:
	 * - —É —Å–ª–æ–≤–∞ –±–µ—Ä–µ—Ç—Å—è hash, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å–æ–º –∫ –Ω—É–∂–Ω–æ–º—É —Å–º–µ—â–µ–Ω–∏—é –≤ —Ñ–∞–π–ª–µ
	 * - –ø–æ –¥–∞–Ω–Ω–æ–º—É —Å–º–µ—â–µ–Ω–∏—é —Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –ª–∏–±–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–≤–∞—Ö —Å –¥–∞–Ω–Ω—ã–º hash
	 */
	public static class IndexesStorage {
		
		public static final int DEFAULT_HASH_LIMIT = 1000;
		public static final int DEFAULT_PAGE_ELEM_COUNT = 10000;
		public static final int HASH_RECORD_SIZE = 8 + 4;
		

		private File parentDir;
		private int hashLimit;
		private int pageElemCount;
		
		private File root;
		private byte[] hashesInfo;
		private File pagesFile;
		private RandomAccessFile pagesRaf;
		private int wordBytesSize;
		private int recordSize;
		private int pageSize;
		
		public IndexesStorage(File parentDir, int wordMaxSize) throws IOException {
			this(parentDir, wordMaxSize, DEFAULT_HASH_LIMIT, DEFAULT_PAGE_ELEM_COUNT);
		}

		public IndexesStorage(File parentDir, int wordMaxSize, int hashLimit, int pageElemCount) throws IOException {
			
			this.parentDir = parentDir;
			this.hashLimit = hashLimit;
			this.pageElemCount = pageElemCount;
			
			wordBytesSize = wordMaxSize*2;
			recordSize = wordBytesSize+1+8+1; //wordBytes+' '+count+'\n\'
			pageSize = recordSize*pageElemCount;
			
		}
		
		/** —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ */
		private void initFiles() throws IOException{
			
			if(root != null) return;
			
			hashesInfo = new byte[hashLimit*HASH_RECORD_SIZE];
			
			root = new File(parentDir, "/index-tmp-"+randomSimpleId());
			root.mkdirs();
			
			pagesFile = new File(root, "pages.data");
			writeFileUTF8(pagesFile, "/* pages by hash */\n");
			pagesRaf = new RandomAccessFile(pagesFile, "rw");
			
		}
		
		/** –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–ª—è –Ω–µ–≥–æ –±–ª–æ–∫–∞ –≤ —Ñ–∞–π–ª–µ */
		public boolean isInvaild(String word) {
			byte[] bytes = getBytesUTF8(word);
			return bytes.length > wordBytesSize;
		}
		
		/** —É–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã */
		public void remove() {
			if(root != null){
				close(pagesRaf);
				deleteDirRecursive(root);
			}
		}

		/** –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª */
		public void putToStorage(WordStat stat)throws IOException {
			
			initFiles();

			int hashOffset = getHashOffset(stat.word);
			
			long pageOffset = getLong(hashesInfo, hashOffset);
			int recordCount = getInt(hashesInfo, hashOffset+8);
			
			byte[] recordBytes = toRecordBytes(stat);
			
			//—Å–ª–æ–≤ —Å –ø–æ–¥–æ–±–Ω—ã–º —Ö–µ—à–æ–º, –µ—â–µ –Ω–µ –±—ã–ª–æ
			if(recordCount == 0){

				byte[] page = new byte[pageSize];
				copyFromSmallToBig(recordBytes, page, 0);
				
				//–∑–∞–ø–∏—Å—å
				pageOffset = pagesFile.length();
				pagesRaf.seek(pageOffset);
				pagesRaf.write(page);
				recordCount = 1;
				
				//–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–¥–µ–∫—Å–æ–≤
				writeLongToArray(pageOffset, hashesInfo, hashOffset);
				writeIntToArray(recordCount, hashesInfo, hashOffset+8);
				
				return;
			}
			

			//–∏—â–µ–º —Å–ª–æ–≤–æ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ö–µ—à—É
			FindResult findResult = findWordStatInPage(pageOffset, recordCount, stat.word);
			//–Ω–æ–≤–æ–µ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
			if(findResult.stat == null){
				if(recordCount == pageElemCount) {
					throw new RecordPageIsFullException();
				}
				copyFromSmallToBig(recordBytes, findResult.pageBytes, recordCount*recordSize);
				recordCount++;
				
				//–∑–∞–ø–∏—Å—å
				pagesRaf.seek(pageOffset);
				pagesRaf.write(findResult.pageBytes);
				
				//–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–¥–µ–∫—Å–æ–≤
				writeIntToArray(recordCount, hashesInfo, hashOffset+8);
				return;
			}
			
			//—É–∂–µ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ - –æ–±–Ω–æ–≤–ª—è–µ–º
			copyFromSmallToBig(recordBytes, findResult.pageBytes, findResult.recordOffset);
			//–∑–∞–ø–∏—Å—å
			pagesRaf.seek(pageOffset);
			pagesRaf.write(findResult.pageBytes);
			
		}

		/** –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª–µ */
		public WordStat getFromStorage(String word)throws IOException {
			
			initFiles();
			
			int hashOffset = getHashOffset(word);
			
			long pageOffset = getLong(hashesInfo, hashOffset);
			int recordCount = getInt(hashesInfo, hashOffset+8);
			
			if(recordCount == 0){
				return null;
			}
			
			FindResult findResult = findWordStatInPage(pageOffset, recordCount, word);
			return findResult == null? null : findResult.stat;
		}
		
		private static class FindResult {
			public WordStat stat;
			public byte[] pageBytes;
			public int recordOffset;
		}
		
		private FindResult findWordStatInPage(long pageOffset, int recordCount, String word) throws IOException{
			
			FindResult out = new FindResult();
			
			//—á–∏—Ç–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º —Ö–µ—à–µ–º –∏–∑ —Ñ–∞–π–ª–∞
			out.pageBytes = new byte[pageSize];
			pagesRaf.seek(pageOffset);
			pagesRaf.read(out.pageBytes);
			
			//–∏—â–µ–º –Ω—É–∂–Ω–æ–µ —Å–ª–æ–≤–æ
			int recordOffset;
			byte[] recordBytes = new byte[recordSize];
			for (int i = 0; i < recordCount; i++) {
				recordOffset = i * recordSize;
				arrayCopy(out.pageBytes, recordOffset, recordBytes, 0, recordSize);
				WordStat stat = fromRecordBytes(recordBytes);
				if(stat != null){
					if(stat.word.equals(word)){
						out.stat = stat;
						out.recordOffset = recordOffset;
						break;
					}
				}
			}
			
			return out;
		}
		
		/** —Ä–∞—Å—á–µ—Ç —Ö–µ—à–∞ —Å–ª–æ–≤–∞ (—Å–º–µ—â–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–Ω–¥–µ–∫—Å–æ–≤) */
		public int getHashOffset(String word){
			return getHashOffset(word, hashLimit) * HASH_RECORD_SIZE;
		}

		public static int getHashOffset(String word, int hashLimit){
			int out = word.hashCode();
			out = Math.abs(out) % hashLimit;
			return out;
		}
		
		/** –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –±–∞–π—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ */
		public byte[] toRecordBytes(WordStat stat){
			byte[] out = new byte[recordSize];
			byte[] str = getBytesUTF8(stat.word);
			copyFromSmallToBig(str, out, 0);
			out[str.length] = ' ';
			writeLongToArray(stat.count, out, str.length+1);
			out[str.length+1+8] = '\n';
			return out;
		}
		
		/** —á—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–π—Ç–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ */
		public WordStat fromRecordBytes(byte[] record){
			
			int endIndex = 0;
			for (int i = record.length-1; i > -1 ; i--){
				if(record[i] == '\n'){
					endIndex = i;
					break;
				}
			}
			
			if(endIndex == 0) return null;
			
			String word = getStr(record, 0, endIndex-9);
			long count = getLong(record, endIndex-8);
			return new WordStat(word, count);
		}
		
		
	}
	

	/** 
	 * –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ö–µ—à–µ–º.
	 * –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–∫–æ–π –æ—à–∏–±–∫–∏, –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –±–æ–ª—å—à—É—é –¥–ª–∏–Ω—É hashLimit:
	 * —ç—Ç–æ —É–≤–µ–ª–∏—á–∏—Ç —á–∏—Å–ª–æ —Ä–∞–∑–ª—á–∏–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ö–µ—à–µ–π, –Ω–æ –∏ —É–≤–µ–ª–∏—á–∏—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞.
	 */
	public static class RecordPageIsFullException extends IOException {
		
		private static final long serialVersionUID = 1L;
		
	}

	


}
